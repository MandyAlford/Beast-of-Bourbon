{"version":3,"sources":["assets/bourbon.svg","assets/bartender.jpg","components/Header/Header.js","components/DrinkCard/DrinkCard.js","ApiCalls/ApiCalls.js","Actions/index.js","components/CardContainer/CardContainer.js","util/RecipeConverter.js","reducers/index.js","reducers/drinks.js","reducers/recipe.js","reducers/favorites.js","components/DrinkRecipe/DrinkRecipe.js","components/Favorites/Favorites.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","withRouter","props","className","onClick","history","push","src","bourbon","alt","aria-label","DrinkCard","getDrinkDetails","event","id","drinkId","target","parentElement","fetch","then","response","json","data","setCurrentRecipe","drinks","this","key","name","image","Component","connect","dispatch","type","drinkRecipe","CardContainer","setDrinks","drinkCards","map","drink","strDrink","strDrinkThumb","idDrink","state","RecipeConverter","sampleDrink","Object","keys","reduce","acc","match","ingredientNum","split","ingredientName","ingredientMeasure","ingredientAndMeasure","rootReducer","combineReducers","action","length","recipe","favorites","element","includes","filter","DrinkRecipe","toggleFavorite","favorite","ingredientElements","orangizeIngredients","ingredient","index","Date","now","strCategory","strGlass","strInstructions","toggleFavoriteRecipe","Favorites","App","path","exact","Boolean","window","location","hostname","store","createStore","composeWithDevTools","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.815c0317.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bourbon.e5ec81b5.svg\";","module.exports = __webpack_public_path__ + \"static/media/bartender.d8754843.jpg\";","import React from \"react\";\nimport \"./Header.css\";\nimport bourbon from \"../../assets/bourbon.svg\";\nimport { withRouter } from 'react-router-dom';\n\nconst Header = (props) => {\n  return (\n    <div className='header'>\n      <div className='logo-nav' onClick={() => props.history.push(`/`)}>\n        <img className='nav-bourbon' src={bourbon} alt='bourbon-logo' />\n        <h1 className='nav-title'>Beast of Bourbon</h1>\n      </div>\n      <div className='greeting'>\n        <h2>Welcome, Bourbon Lover!</h2>\n          <button\n            aria-label = 'Favorites'\n            onClick={() => props.history.push(`/favorites`)}\n            >\n            View Favorites\n          </button>\n      </div>\n    </div>\n  )\n}\n\nexport default withRouter(Header);\n","import React, { Component } from 'react';\nimport './DrinkCard.css';\nimport { fetchDrinkRecipe } from '../../ApiCalls/ApiCalls';\nimport { getDrinkRecipe } from '../../Actions';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nclass DrinkCard extends Component {\n  constructor(){\n    super();\n  }\n\ngetDrinkDetails = (event) => {\n  let drinkId = event.target.parentElement.id\n  fetchDrinkRecipe(drinkId).then((data) => {\n    this.props.setCurrentRecipe(data.drinks[0])\n    this.props.history.push(`/drinks/${drinkId}`)\n  })\n}\n\nrender() {\n  return (\n    <div className='drink-card' id={this.props.id} key={`${this.props.id}a`} onClick={this.getDrinkDetails}>\n      <h1 className='drink-card-header'>{this.props.name}</h1>\n      <img className='drink-card-image' src={this.props.image} alt={`${this.props.name}-image`}\n      />\n    </div>\n  )\n}\n}\n\nconst mapDispatchToProps = dispatch => ({\n  setCurrentRecipe: data => dispatch( getDrinkRecipe(data) )\n})\n\nexport default connect(null, mapDispatchToProps)(withRouter(DrinkCard));\n","\nexport const fetchDrinks = () => {\n  return fetch(`https://www.thecocktaildb.com/api/json/v1/1/filter.php?i=Bourbon`)\n    .then((response) => response.json())\n}\n\nexport const fetchDrinkRecipe = (id) => {\n  return fetch(`https://www.thecocktaildb.com/api/json/v1/1/lookup.php?i=${id}`)\n    .then((response) => response.json())\n}\n","export const getDrinks = (drinks) => ({\n  type: 'GET_DRINKS',\n  drinks\n});\n\nexport const getDrinkRecipe = (drinkRecipe) => ({\n    type: 'GET_RECIPE',\n    drinkRecipe\n  });\n\nexport const toggleFavoriteRecipe = (recipe) => ({\n    type: 'TOGGLE_FAVORITE',\n    recipe\n  });\n","import React, { Component } from \"react\";\nimport './CardContainer.css';\nimport bartender from '../../assets/bartender.jpg';\nimport DrinkCard from '../DrinkCard/DrinkCard';\nimport { getDrinks } from '../../Actions';\nimport { connect } from 'react-redux';\nimport { fetchDrinks } from '../../ApiCalls/ApiCalls'\n\nclass CardContainer extends Component {\n  constructor() {\n    super();\n  }\n\n  componentDidMount() {\n    fetchDrinks().then((data) => {\n      this.props.setDrinks(data.drinks)\n    })\n  }\n\n  render() {\n    const drinkCards = this.props.drinks.map(drink => <DrinkCard name={drink.strDrink}\n    image={drink.strDrinkThumb}\n    id={drink.idDrink}\n    key={drink.idDrink}\n      />)\n    return(\n      <div className='card-container'>\n        {drinkCards}\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  setDrinks: data => dispatch( getDrinks(data) )\n})\n\nconst mapStateToProps = state => ({\n  drinks: state.drinks\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardContainer);\n","\nclass RecipeConverter {\n  constructor(sampleDrink){\n    this.drink = sampleDrink;\n  }\n  orangizeIngredients(){\n    let keys = Object.keys(this.drink)\n\n    return keys.reduce((acc, key) => {\n      if(this.drink[key] !== null && key.match(/strIngredient/)) {\n        let ingredientNum = key.split('strIngredient')[1]\n        let ingredientName = this.drink[key]\n        let ingredientMeasure = this.drink[`strMeasure${ingredientNum}`]\n        let ingredientAndMeasure = `${ingredientName}: ${ingredientMeasure}`\n\n        acc.push(ingredientAndMeasure)\n      }\n      return acc\n    }, [])\n  }\n}\n\nexport default RecipeConverter;\n","import { combineReducers } from 'redux';\nimport { drinks } from './drinks';\nimport { recipe } from './recipe';\nimport { favorites } from './favorites';\n\nconst rootReducer = combineReducers({\n  drinks,\n  recipe,\n  favorites\n})\n\nexport default rootReducer;\n","export const drinks = (state = [], action) => {\n  switch (action.type) {\n    case 'GET_DRINKS':\n      if(state.length === 0) {\n        return [...state, ...action.drinks]\n      } else {\n        return state;\n      }\n    default:\n      return state;\n  }\n}\n","export const recipe = (state = {}, action) => {\n  switch (action.type) {\n    case 'GET_RECIPE':\n      return action.drinkRecipe\n    default:\n      return state;\n  }\n}\n","export const favorites = (state = [], action) => {\n  switch (action.type) {\n    case 'TOGGLE_FAVORITE':\n\n      if(!state.map(element => element.idDrink).includes(action.recipe.idDrink)){\n        return [...state, action.recipe]\n      } else {\n        return state.filter(element => element.idDrink !== action.recipe.idDrink)\n      }\n    default:\n      return state;\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./DrinkRecipe.css\";\nimport { connect } from \"react-redux\";\nimport RecipeConverter from '../../util/RecipeConverter';\nimport rootReducer from '../../reducers'\nimport { toggleFavoriteRecipe } from '../../Actions';\n\nclass DrinkRecipe extends Component {\n  constructor() {\n    super();\n  }\n\n  toggleFavorite = () => {\n    let favorite = this.props.recipe;\n    this.props.toggleFavorite(favorite)\n  }\n\n  render() {\n    if(Object.keys(this.props.recipe).length > 0) {\n      let recipeConverter = new RecipeConverter(this.props.recipe)\n      let recipeIngredients = recipeConverter.orangizeIngredients()\n\n      let ingredientElements = recipeIngredients.map((ingredient, index) => {\n        return <li key={index}>{ingredient}</li>\n      })\n      return(\n        <div className='drink-recipe' id={this.props.recipe.idDrink} key={Date.now()}>\n          <div className='recipe-details'>\n            <h2>{this.props.recipe.strDrink}</h2>\n            <p>Type: {this.props.recipe.strCategory}</p>\n            <p>Glassware: {this.props.recipe.strGlass}</p>\n            <p>Ingredients:</p>\n            <ul> { ingredientElements } </ul>\n            <p>{this.props.recipe.strInstructions}</p>\n            <button className='favorite-button' id={this.props.recipe.idDrink} onClick={this.toggleFavorite}>Favorite</button>\n          </div>\n          <div className='image-wrapper'>\n            <img className='drink-recipe-image' src={this.props.recipe.strDrinkThumb} alt={`${this.props.recipe.strDrink}-image`}/>\n          </div>\n        </div>\n      )\n    } else {\n      return <h2 className='error-message'>Ooops...something went wrong!</h2>\n    }\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  toggleFavorite: data => dispatch( toggleFavoriteRecipe(data) )\n})\n\nexport default connect(null, mapDispatchToProps)(DrinkRecipe);\n","import React, { Component } from \"react\";\nimport './Favorites.css';\nimport { connect } from 'react-redux';\nimport { fetchDrinkRecipe } from '../../ApiCalls/ApiCalls';\nimport { Route, withRouter } from 'react-router-dom';\nimport DrinkRecipe from '../DrinkRecipe/DrinkRecipe';\n\nclass Favorites extends Component {\n  constructor() {\n    super();\n  }\n\n  render() {\n    return this.props.favorites.map((favorite, index )=> {\n      return <DrinkRecipe\n      recipe={favorite}\n      key={index}/>\n    })\n  }\n}\n\nconst mapStateToProps = state => ({\n  favorites: state.favorites\n})\n\nexport default connect(mapStateToProps)(withRouter(Favorites));\n","\nimport './App.css';\nimport React, { Component } from \"react\";\nimport { Route, Link } from \"react-router-dom\";\nimport Header from \"../Header/Header\";\nimport CardContainer from \"../CardContainer/CardContainer\";\nimport DrinkRecipe from '../DrinkRecipe/DrinkRecipe';\nimport Favorites from \"../Favorites/Favorites\";\nimport { connect } from \"react-redux\";\n\nclass App extends Component {\n  constructor() {\n    super();\n  }\n\n  render() {\n    return (\n      <main>\n      <Route path='/' exact>\n        <Header />\n        <CardContainer />\n      </Route>\n      <Route path='/drinks/:drink_id'>\n        <Header />\n        <DrinkRecipe recipe={this.props.recipe}/>\n      </Route>\n      <Route path='/favorites'>\n        <Header />\n        <Favorites />\n      </Route>\n      </main>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    recipe: state.recipe\n  }\n};\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\nimport rootReducer from './reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}